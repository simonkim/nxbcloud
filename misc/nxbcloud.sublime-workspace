{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"active",
				"activeTableId"
			],
			[
				"acti",
				"activeTableId"
			],
			[
				"subscri",
				"subscriptionReady"
			],
			[
				"suppor",
				"supportCanvas"
			],
			[
				"sup",
				"supportCanvas"
			],
			[
				"data-",
				"data-href"
			],
			[
				"status",
				"statusCode"
			],
			[
				"build",
				"buildQueryParamsOld"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Router.configure({\n  layoutTemplate: 'layout',\n  loadingTemplate: 'loading',\n  waitOn: function() { \n    return [Meteor.subscribe('notifications')]\n  }\n});\n\nRouter.route( '/', function() {\n  this.render('postsList');\n}, {\n  name: 'home'\n});\n\n\n/*\nPostsListController = RouteController.extend({\n  template: 'postsList',\n  increment: 5, \n  limit: function() { \n    return parseInt(this.params.postsLimit) || this.increment; \n  },\n  findOptions: function() {\n    return {sort: this.sort, limit: this.limit()};\n  },\n  waitOn: function() {\n    return Meteor.subscribe('posts', this.findOptions());\n  },\n  posts: function() {\n    return Posts.find({}, this.findOptions());\n  },\n  data: function() {\n    var hasMore = this.posts().count() === this.limit();\n    return {\n      posts: this.posts(),\n      nextPath: hasMore ? this.nextPath() : null\n    };\n  }\n});\n\nNewPostsListController = PostsListController.extend({\n  sort: {submitted: -1, _id: -1},\n  nextPath: function() {\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\n  }\n});\n\nBestPostsListController = PostsListController.extend({\n  sort: {votes: -1, submitted: -1, _id: -1},\n  nextPath: function() {\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\n  }\n});\n*/\n\n/*\nRouter.map(function() {\n  this.route('home-disabled', {\n    path: '/home',\n    controller: NewPostsListController\n  });\n  \n  this.route('newPosts', {\n    path: '/new/:postsLimit?',\n    controller: NewPostsListController\n  });\n  \n  this.route('bestPosts', {\n    path: '/best/:postsLimit?',\n    controller: BestPostsListController\n  });\n  \n  this.route('postPage', {\n    path: '/posts/:_id',\n    waitOn: function() {\n      return [\n        Meteor.subscribe('singlePost', this.params._id),\n        Meteor.subscribe('comments', this.params._id)\n      ];\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n  });\n\n  this.route('postEdit', {\n    path: '/posts/:_id/edit',\n    waitOn: function() { \n      return Meteor.subscribe('singlePost', this.params._id);\n    },\n    data: function() { return Posts.findOne(this.params._id); }\n  });\n  \n  this.route('postSubmit', {\n    path: '/submit',\n    progress: {enabled: false}\n  });\n});\n*/\n/*\nvar requireLogin = function(pause) {\n  if (! Meteor.user()) {\n    if (Meteor.loggingIn())\n      this.render(this.loadingTemplate);\n    else\n      this.render('accessDenied');\n    \n    pause();\n  }\n}\n*/\n\nRouter.onBeforeAction('loading');\n/*\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\n*/\nRouter.onBeforeAction(function() { clearErrors() });\n",
			"file": "/Users/simon/Documents/Projects/Node/meteor/nxbcloud/lib/router.js",
			"file_size": 2567,
			"file_write_time": 1454891323000000,
			"settings":
			{
				"buffer_size": 2590,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 7863 files for \"clearErrors\"\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/server/app/lib/router.js:\n  106  Router.onBeforeAction('loading');\n  107  Router.onBeforeAction(requireLogin, {only: 'postSubmit'});\n  108: Router.onBeforeAction(function() { clearErrors() });\n  109  \n  110  }).call(this);\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/server/app/lib/router.js.map:\n    1: {\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/web.browser/app/client/helpers/errors.js:\n    6  }\n    7  \n    8: clearErrors = function() {\n    9    Errors.remove({seen: true});\n   10  }\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/web.browser/app/client/helpers/errors.js.map:\n    1: {\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/web.browser/app/lib/router.js:\n  106  Router.onBeforeAction('loading');\n  107  Router.onBeforeAction(requireLogin, {only: 'postSubmit'});\n  108: Router.onBeforeAction(function() { clearErrors() });\n  109  \n  110  }).call(this);\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/build/programs/web.browser/app/lib/router.js.map:\n    1: {\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/19659e36de2a339e69f01a9f87cf5d6260f07889.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/2f9a035dcce67deeddc78d887d396bb3635c73e0.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  //this.route('home', {\\n  //  path: '/',\\n  //  controller: NewPostsListController\\n  //});\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  //this.route('home', {\\n  //  path: '/',\\n  //  controller: NewPostsListController\\n  //});\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/426da70fd715227578b9ff1b554a01c66ed97bd0.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  },\\n  action: function() {\\n    this.render('postsList');\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  },\\n  action: function() {\\n    this.render('postsList');\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/5e36ae4ce037e2196e8f8917362b5660d060296e.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/9524ad0a19c5ed0686d03f1e003b55ff99d3ed4d.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  },\\n  action: function() {\\n    this.render('postsList');\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  },\\n  action: function() {\\n    this.render('postsList');\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/996e135ebeab76481c24219becc4cf84ae58e1ce.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/a02656c6fb1a5e05949f9cda52600a5ffa42a5a3.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  //this.route('home', {\\n  //  path: '/',\\n  //  controller: NewPostsListController\\n  //});\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  //this.route('home', {\\n  //  path: '/',\\n  //  controller: NewPostsListController\\n  //});\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/ad192240347a74593fe48188fe0450ec2805b1ce.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/b836a2be7a48ea6bd7c5bc1240cc9f7d4f583761.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/bea396679f0859f7884e6040565f42bf2729657a.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.getName() === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/d7c04970178e4c72793e84cdfc8ac9e903af8277.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nHTTP = Package['cfs:http-methods'].HTTP;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.route( '/', function() {\\n  this.render('postsList');\\n}, {\\n  name: 'home'\\n});\\n\\nRouter.map(function() {\\n  this.route('home-disabled', {\\n    path: '/home',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/f33aa75467a899c4aa40663f944c4c9674bc5b11.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsClient = Package['accounts-base'].AccountsClient;\\nHTTP = Package['raix:http-methods'].HTTP;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nSession = Package.session.Session;\\nDDP = Package['ddp-client'].DDP;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\nTemplate = Package.templating.Template;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\n$ = Package.jquery.$;\\njQuery = Package.jquery.jQuery;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nLaunchScreen = Package['launch-screen'].LaunchScreen;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/application/template.layout.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/application/template.layout.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/application/template.layout.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"layout\\\");\\nTemplate[\\\"layout\\\"] = new Template(\\\"Template.layout\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"container\\\"\\n  }, \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"header\\\")), \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"errors\\\")), \\\"\\\\n    \\\", HTML.DIV({\\n    id: \\\"main\\\",\\n    \\\"class\\\": \\\"row-fluid\\\"\\n  }, \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"yield\\\")), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"comment\\\");\\nTemplate[\\\"comment\\\"] = new Template(\\\"Template.comment\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"editing\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_edit\\\")), \\\"\\\\n      \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"comment_view\\\")), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.P(Blaze.View(\\\"lookup:body\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n  })), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"comment_edit\\\");\\nTemplate[\\\"comment_edit\\\"] = new Template(\\\"Template.comment_edit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, HTML.Raw('\\\\n    <span for=\\\"label\\\">Label</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"label\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"label\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <span for=\\\"url\\\">URL</span>\\\\n    '), HTML.INPUT({\\n    type: \\\"text\\\",\\n    name: \\\"url\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }), HTML.Raw('\\\\n    <label for=\\\"body\\\">Description (optional)</label>\\\\n    '), HTML.TEXTAREA({\\n    name: \\\"body\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"body\\\"));\\n    }\\n  }), HTML.Raw('\\\\n\\\\n    <button class=\\\"btn btn-mini btn-danger cancel\\\">Cancel</button>\\\\n    <button class=\\\"btn btn-mini done\\\" type=\\\"submit\\\">Done</button>\\\\n  '));\\n}));\\n\\nTemplate.__checkName(\\\"comment_view\\\");\\nTemplate[\\\"comment_view\\\"] = new Template(\\\"Template.comment_view\\\", (function() {\\n  var view = this;\\n  return [ HTML.H4(\\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"label\\\"\\n  }, HTML.Raw('<i class=\\\"icon-tag\\\"></i>'), Blaze.View(\\\"lookup:displayLabel\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"displayLabel\\\"));\\n  })), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"url\\\"\\n  }, \\\" \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    }\\n  }, Blaze.View(\\\"lookup:url\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n  }))), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV(\\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"extraParams\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-lock\\\"\\n    }), Blaze.View(\\\"lookup:extServer\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extServer\\\"));\\n    })), \\\"\\\\n\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-info\\\"\\n    }, HTML.I({\\n      \\\"class\\\": \\\"icon-home\\\"\\n    }), Blaze.View(\\\"lookup:extCompany\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"extCompany\\\"));\\n    })), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", HTML.SPAN({\\n    \\\"class\\\": \\\"badge\\\"\\n  }, HTML.Raw('<i class=\\\"icon-globe\\\"></i>'), Blaze.View(\\\"lookup:domain\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n  })), \\\"\\\\n    \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini btn-danger delete\\\"\\n    }, \\\"Delete\\\"), \\\"\\\\n    \\\", HTML.BUTTON({\\n      \\\"class\\\": \\\"btn btn-mini edit\\\"\\n    }, \\\"Edit\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/template.comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/template.comment_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/template.comment_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"commentSubmit\\\");\\nTemplate[\\\"commentSubmit\\\"] = new Template(\\\"Template.commentSubmit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    name: \\\"comment\\\",\\n    \\\"class\\\": \\\"comment-form\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"url\\\">URL</label>\\\\n            <input type=\\\"text\\\" cols=\\\"80\\\" name=\\\"url\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.Raw('<div class=\\\"controls\\\">\\\\n            <label for=\\\"label\\\">Label</label>\\\\n            <input type=\\\"text\\\" name=\\\"label\\\">\\\\n        </div>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n          \\\", HTML.Raw('<label for=\\\"body\\\">Description (optional)</label>'), \\\"\\\\n          \\\", HTML.TEXTAREA({\\n    name: \\\"body\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Add Link</button>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.access_denied.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.access_denied.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.access_denied.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"accessDenied\\\");\\nTemplate[\\\"accessDenied\\\"] = new Template(\\\"Template.accessDenied\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div class=\\\"alert alert-error\\\">You can\\\\'t get here! Please log in</div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.errors.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.errors.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"errors\\\");\\nTemplate[\\\"errors\\\"] = new Template(\\\"Template.errors\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"errors row-fluid\\\"\\n  }, \\\"    \\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"errors\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"error\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\");\\n}));\\n\\nTemplate.__checkName(\\\"error\\\");\\nTemplate[\\\"error\\\"] = new Template(\\\"Template.error\\\", (function() {\\n  var view = this;\\n  return HTML.DIV({\\n    \\\"class\\\": \\\"alert alert-error\\\"\\n  }, HTML.Raw('\\\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</button>\\\\n    '), Blaze.View(\\\"lookup:message\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n  }), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.header.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.header.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"header\\\");\\nTemplate[\\\"header\\\"] = new Template(\\\"Template.header\\\", (function() {\\n  var view = this;\\n  return HTML.HEADER({\\n    \\\"class\\\": \\\"navbar\\\"\\n  }, \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"navbar-inner\\\"\\n  }, \\\"\\\\n      \\\", HTML.Raw('<a class=\\\"btn btn-navbar\\\" data-toggle=\\\"collapse\\\" data-target=\\\".nav-collapse\\\">\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n        <span class=\\\"icon-bar\\\"></span>\\\\n      </a>'), \\\"\\\\n      \\\", HTML.A({\\n    \\\"class\\\": \\\"brand\\\",\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"home\\\");\\n    }\\n  }, \\\"NXB Cloud : Content Stream Directory\\\"), \\\"\\\\n      \\\", HTML.DIV({\\n    \\\"class\\\": \\\"nav-collapse collapse\\\"\\n  }, \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI({\\n    \\\"class\\\": function() {\\n      return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"home\\\", \\\"newPosts\\\");\\n    }\\n  }, \\\"\\\\n            \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"newPosts\\\");\\n    }\\n  }, \\\"Collections\\\"), \\\"\\\\n          \\\"), \\\"\\\\n          \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": function() {\\n        return Spacebars.mustache(view.lookup(\\\"activeRouteClass\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"\\\\n              \\\", HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postSubmit\\\");\\n      }\\n    }, \\\"Add Collection\\\"), \\\"\\\\n            \\\"), \\\"\\\\n            \\\", HTML.LI({\\n      \\\"class\\\": \\\"dropdown\\\"\\n    }, \\\"\\\\n              \\\", Spacebars.include(view.lookupTemplate(\\\"notifications\\\")), \\\"\\\\n            \\\"), \\\"\\\\n          \\\" ];\\n  }), \\\"\\\\n          \\\", HTML.Raw('<li>\\\\n            <a href=\\\"/api/nxb\\\">JSON API</a>\\\\n          </li>'), \\\"\\\\n        \\\"), \\\"\\\\n        \\\", HTML.UL({\\n    \\\"class\\\": \\\"nav pull-right\\\"\\n  }, \\\"\\\\n          \\\", HTML.LI(Spacebars.include(view.lookupTemplate(\\\"loginButtons\\\"))), \\\"\\\\n        \\\"), \\\"\\\\n      \\\"), \\\"\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/template.loading.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/template.loading.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/includes/template.loading.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"loading\\\");\\nTemplate[\\\"loading\\\"] = new Template(\\\"Template.loading\\\", (function() {\\n  var view = this;\\n  return Spacebars.include(view.lookupTemplate(\\\"spinner\\\"));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/template.notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/template.notifications.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/notifications/template.notifications.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"notifications\\\");\\nTemplate[\\\"notifications\\\"] = new Template(\\\"Template.notifications\\\", (function() {\\n  var view = this;\\n  return [ HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": \\\"dropdown-toggle\\\",\\n    \\\"data-toggle\\\": \\\"dropdown\\\"\\n  }, \\\"\\\\n    Notifications\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.SPAN({\\n      \\\"class\\\": \\\"badge badge-inverse\\\"\\n    }, Blaze.View(\\\"lookup:notificationCount\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationCount\\\"));\\n    })), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n    \\\", HTML.Raw('<b class=\\\"caret\\\"></b>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"notification dropdown-menu\\\"\\n  }, \\\"\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"notificationCount\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Blaze.Each(function() {\\n      return Spacebars.call(view.lookup(\\\"notifications\\\"));\\n    }, function() {\\n      return [ \\\"\\\\n        \\\", Spacebars.include(view.lookupTemplate(\\\"notification\\\")), \\\"\\\\n      \\\" ];\\n    }), \\\"\\\\n    \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.LI(HTML.SPAN(\\\"No Notifications\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\") ];\\n}));\\n\\nTemplate.__checkName(\\\"notification\\\");\\nTemplate[\\\"notification\\\"] = new Template(\\\"Template.notification\\\", (function() {\\n  var view = this;\\n  return HTML.LI(\\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"notificationPostPath\\\"));\\n    }\\n  }, \\\"\\\\n      \\\", HTML.STRONG(Blaze.View(\\\"lookup:commenterName\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"commenterName\\\"));\\n  })), \\\" commented on your post\\\\n    \\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_edit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_edit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postEdit\\\");\\nTemplate[\\\"postEdit\\\"] = new Template(\\\"Template.postEdit\\\", (function() {\\n  var view = this;\\n  return HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"title\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n    },\\n    placeholder: \\\"Name your post\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"url\\\">URL (optional)</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.INPUT({\\n    name: \\\"url\\\",\\n    type: \\\"text\\\",\\n    value: function() {\\n      return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n    },\\n    placeholder: \\\"Your URL\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), HTML.Raw('\\\\n\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary submit\\\">\\\\n        </div>\\\\n    </div>\\\\n    <hr>\\\\n    <div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <a class=\\\"btn btn-danger delete\\\" href=\\\"#\\\">Delete post</a>\\\\n        </div>\\\\n    </div>\\\\n  '));\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_item.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_item.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postItem\\\");\\nTemplate[\\\"postItem\\\"] = new Template(\\\"Template.postItem\\\", (function() {\\n  var view = this;\\n  return HTML.DIV(HTML.Attrs({\\n    \\\"class\\\": \\\"post\\\"\\n  }, function() {\\n    return Spacebars.attrMustache(view.lookup(\\\"attributes\\\"));\\n  }), \\\"\\\\n    \\\", HTML.A({\\n    href: \\\"#\\\",\\n    \\\"class\\\": function() {\\n      return [ \\\"upvote btn \\\", Spacebars.mustache(view.lookup(\\\"upvotedClass\\\")) ];\\n    }\\n  }, \\\"â¬†\\\"), \\\"\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"post-content\\\"\\n  }, \\\"\\\\n      \\\", HTML.H3(Blaze.View(\\\"lookup:title\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"title\\\"));\\n  })), \\\"\\\\n      \\\", HTML.P(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"votes\\\"), \\\"Vote\\\");\\n  }), \\\",\\\\n        submitted by \\\", Blaze.View(\\\"lookup:author\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"author\\\"));\\n  }), \\\",\\\\n        \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    }\\n  }, Blaze.View(\\\"lookup:pluralize\\\", function() {\\n    return Spacebars.mustache(view.lookup(\\\"pluralize\\\"), view.lookup(\\\"commentsCount\\\"), \\\"link\\\");\\n  })), \\\"\\\\n        \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"ownPost\\\"));\\n  }, function() {\\n    return HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postEdit\\\");\\n      }\\n    }, \\\"Edit\\\");\\n  }), \\\"\\\\n      \\\"), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"url\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.P(HTML.A({\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"url\\\"));\\n      }\\n    }, Blaze.View(\\\"lookup:domain\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"domain\\\"));\\n    }))), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n      \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"message\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n        \\\", HTML.BLOCKQUOTE(\\\"\\\\n        \\\", Blaze.View(\\\"lookup:message\\\", function() {\\n      return Spacebars.mustache(view.lookup(\\\"message\\\"));\\n    }), \\\"\\\\n        \\\"), \\\"\\\\n      \\\" ];\\n  }), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.A({\\n    href: function() {\\n      return Spacebars.mustache(view.lookup(\\\"pathFor\\\"), \\\"postPage\\\");\\n    },\\n    \\\"class\\\": \\\"discuss btn\\\"\\n  }, \\\"Open\\\"), \\\"\\\\n  \\\");\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_page.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_page.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postPage\\\");\\nTemplate[\\\"postPage\\\"] = new Template(\\\"Template.postPage\\\", (function() {\\n  var view = this;\\n  return [ Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n  \\\\n  \\\", HTML.UL({\\n    \\\"class\\\": \\\"comments\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"comments\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"comment\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n  \\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"commentSubmit\\\")), \\\"\\\\n  \\\" ];\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", HTML.P(\\\"Please log in to leave a comment.\\\"), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.post_submit.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.post_submit.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postSubmit\\\");\\nTemplate[\\\"postSubmit\\\"] = new Template(\\\"Template.postSubmit\\\", (function() {\\n  var view = this;\\n  return [ HTML.FORM({\\n    \\\"class\\\": \\\"main\\\"\\n  }, \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"title\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Collection Name i.e. HLS Vod Links\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.DIV({\\n    \\\"class\\\": \\\"control-group\\\"\\n  }, \\\"\\\\n        \\\", HTML.Raw('<label class=\\\"control-label\\\" for=\\\"message\\\">Description</label>'), \\\"\\\\n        \\\", HTML.DIV({\\n    \\\"class\\\": \\\"controls\\\"\\n  }, \\\"\\\\n            \\\", HTML.TEXTAREA({\\n    name: \\\"message\\\",\\n    type: \\\"text\\\",\\n    value: \\\"\\\",\\n    placeholder: \\\"Describe this collection\\\"\\n  }), \\\"\\\\n        \\\"), \\\"\\\\n    \\\"), \\\"\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <label class=\\\"control-label\\\" for=\\\"url\\\">Optional URL</label>\\\\n        <div class=\\\"controls\\\">\\\\n            <input name=\\\"url\\\" type=\\\"text\\\" value=\\\"\\\" placeholder=\\\"Your URL\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n\\\\n    \\\", HTML.Raw('<div class=\\\"control-group\\\">\\\\n        <div class=\\\"controls\\\">\\\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\" class=\\\"btn btn-primary\\\">\\\\n        </div>\\\\n    </div>'), \\\"\\\\n  \\\"), \\\"\\\\n  \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.posts_list.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.posts_list.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"postsList\\\");\\nTemplate[\\\"postsList\\\"] = new Template(\\\"Template.postsList\\\", (function() {\\n  var view = this;\\n  return [ HTML.DIV({\\n    \\\"class\\\": \\\"posts\\\"\\n  }, \\\"\\\\n    \\\", Blaze.Each(function() {\\n    return Spacebars.call(view.lookup(\\\"postsWithRank\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", Spacebars.include(view.lookupTemplate(\\\"postItem\\\")), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n\\\\n    \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"nextPath\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n      \\\", HTML.A({\\n      \\\"class\\\": \\\"load-more\\\",\\n      href: function() {\\n        return Spacebars.mustache(view.lookup(\\\"nextPath\\\"));\\n      }\\n    }, \\\"Load more\\\"), \\\"\\\\n    \\\" ];\\n  }), \\\"\\\\n  \\\"), \\\"\\\\n\\\\n  \\\", Blaze.If(function() {\\n    return Spacebars.call(view.lookup(\\\"currentUser\\\"));\\n  }, function() {\\n    return [ \\\"\\\\n    \\\", Spacebars.include(view.lookupTemplate(\\\"uploadnxb\\\")), \\\"\\\\n  \\\" ];\\n  }) ];\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/template.uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/template.uploadnxb.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/template.uploadnxb.js\",\"sourcesContent\":[\"\\nTemplate.__checkName(\\\"uploadnxb\\\");\\nTemplate[\\\"uploadnxb\\\"] = new Template(\\\"Template.uploadnxb\\\", (function() {\\n  var view = this;\\n  return HTML.Raw('<div id=\\\"dropzone\\\" class=\\\"dropzone well\\\">\\\\n    <div style=\\\"text-align: center; color: gray;\\\">Drop file to upload</div>\\\\n    <form class=\\\"uploadnxb\\\">\\\\n    <input type=\\\"file\\\" name=\\\"nxbfile\\\">\\\\n    </form>\\\\n  </div>');\\n}));\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/comments/comment.js\",\"sourcesContent\":[\"var url2hostname = function(url) {\\n  var a = document.createElement('a');\\n  a.href = url;\\n  return a.hostname;\\n};\\n\\nvar extraParams = function(label) {\\n  var params = label.split('&&');\\n  return params.length == 2\\n};\\n\\nTemplate.comment.helpers({\\n  submittedText: function() {\\n    return new Date(this.submitted).toString();\\n  },\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n\\n  editing: function() {\\n    return Session.get(\\\"commentsEditing\\\") == this._id;\\n  },\\n\\n});\\n\\nTemplate.comment.events({\\n    \\\"click .edit\\\": function() {\\n      console.log('click.edit');\\n      if (!Session.get(\\\"commentsEditing\\\")) {\\n        Session.set(\\\"commentsEditing\\\", this._id);\\n      }\\n    },\\n\\n    \\\"click .delete\\\": function() {\\n      if (confirm(\\\"Delete this link?\\\")) {\\n        var currentCommentId = this._id;\\n        Comments.remove(currentCommentId);\\n        Session.set(\\\"commentsEditing\\\", null);\\n      }\\n    }\\n\\n});\\n\\nTemplate.comment_view.helpers({\\n  domain: function() {\\n    return url2hostname(this.url);\\n  },\\n  extraParams: function() {\\n    return extraParams(this.label);\\n  },\\n  extServer: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[0];\\n  },\\n  extCompany: function() {\\n    var params = this.label.split(' ');\\n    var params = params[0].split('&&');\\n    return params[1];\\n  },\\n  displayLabel: function() {\\n    var label = this.label;\\n    if (extraParams(label)) {\\n      var labelTokens = label.split(' ');\\n      if ( labelTokens.length > 1) {\\n        label = labelTokens[1];\\n      } else {\\n        label = '';\\n      }\\n    }\\n    return label;\\n  }\\n\\n});\\n\\nTemplate.comment_edit.events({\\n\\n    \\\"submit form\\\": function(e) {\\n      e.preventDefault();\\n\\n      var $body = $(e.target).find('[name=body]');\\n      var $label = $(e.target).find('[name=label]');\\n      var $url = $(e.target).find('[name=url]');\\n      var comment = {\\n        label: $label.val(),\\n        url: $url.val(),\\n        body: $body.val(),\\n      };\\n\\n      var commentId = this._id;\\n      Comments.update(commentId, {$set: comment}, function(error) {\\n        if (error) {\\n          // display the error to the user\\n          throwError(error.reason);\\n        } else {\\n          Session.set(\\\"commentsEditing\\\", null);\\n        }\\n      });\\n    },\\n\\n    \\\"click .cancel\\\": function() {\\n      Session.set(\\\"commentsEditing\\\", null);\\n    },\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/comments/comment_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/comments/comment_submit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/comments/comment_submit.js\",\"sourcesContent\":[\"Template.commentSubmit.events({\\n  'submit form': function(e, template) {\\n    e.preventDefault();\\n\\n    var $body = $(e.target).find('[name=body]');\\n    var $label = $(e.target).find('[name=label]');\\n    var $url = $(e.target).find('[name=url]');\\n    var comment = {\\n      label: $label.val(),\\n      url: $url.val(),\\n      body: $body.val(),\\n      postId: template.data._id\\n    };\\n\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      } else {\\n        $body.val('');\\n      }\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/includes/errors.js\",\"sourcesContent\":[\"Template.errors.helpers({\\n  errors: function() {\\n    return Errors.find();\\n  }\\n});\\n\\nTemplate.error.rendered = function() {\\n  var error = this.data;\\n  Meteor.defer(function() {\\n    Errors.update(error._id, {$set: {seen: true}});\\n  });\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/includes/header.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/includes/header.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/includes/header.js\",\"sourcesContent\":[\"Template.header.helpers({\\n  activeRouteClass: function(/* route names */) {\\n    var args = Array.prototype.slice.call(arguments, 0);\\n    args.pop();\\n    \\n    var active = _.any(args, function(name) {\\n      return Router.current() && Router.current().route.name === name\\n    });\\n    \\n    return active && 'active';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\\n}).call(this);\\n\",\"servePath\":\"/client/views/notifications/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/notifications/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/client/views/notifications/notifications.js\",\"sourcesContent\":[\"Template.notifications.helpers({\\n  notifications: function() {\\n    return Notifications.find({userId: Meteor.userId(), read: false});\\n  },\\n  notificationCount: function(){\\n  \\treturn Notifications.find({userId: Meteor.userId(), read: false}).count();\\n  }\\n});\\n\\nTemplate.notification.helpers({\\n  notificationPostPath: function() {\\n    return Router.routes.postPage.path({_id: this.postId});\\n  }\\n})\\n\\nTemplate.notification.events({\\n  'click a': function() {\\n    Notifications.update(this._id, {$set: {read: true}});\\n  }\\n})\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_edit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_edit.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/post_edit.js\",\"sourcesContent\":[\"Template.postEdit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var currentPostId = this._id;\\n\\n    var postProperties = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Posts.update(currentPostId, {$set: postProperties}, function(error) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n      } else {\\n        Router.go('postPage', {_id: currentPostId});\\n      }\\n    });\\n  },\\n\\n  'click .delete': function(e) {\\n    e.preventDefault();\\n\\n    if (confirm(\\\"Delete this post?\\\")) {\\n      var currentPostId = this._id;\\n      Posts.remove(currentPostId);\\n      Router.go('home');\\n    }\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_item.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_item.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_item.js\",\"sourcesContent\":[\"var POST_HEIGHT = 80;\\nvar Positions = new Meteor.Collection(null);\\n\\nTemplate.postItem.helpers({\\n  ownPost: function() {\\n    return this.userId == Meteor.userId();\\n  },\\n  domain: function() {\\n    var a = document.createElement('a');\\n    a.href = this.url;\\n    return a.hostname;\\n  },\\n  upvotedClass: function() {\\n    var userId = Meteor.userId();\\n    if (userId && !_.include(this.upvoters, userId)) {\\n      return 'btn-primary upvotable';\\n    } else {\\n      return 'disabled';\\n    }\\n  },\\n  attributes: function() {\\n    var post = _.extend({}, Positions.findOne({postId: this._id}), this);\\n    var newPosition = post._rank * POST_HEIGHT;\\n    var attributes = {};\\n    \\n    if (_.isUndefined(post.position)) {\\n      attributes.class = 'post invisible';\\n    } else {\\n      var delta = post.position - newPosition;      \\n      attributes.style = \\\"top: \\\" + delta + \\\"px\\\";\\n      if (delta === 0)\\n        attributes.class = \\\"post animate\\\"\\n    }\\n    \\n    Meteor.setTimeout(function() {\\n      Positions.upsert({postId: post._id}, {$set: {position: newPosition}})\\n    });\\n    \\n    return attributes;\\n  }\\n});\\n\\nTemplate.postItem.events({\\n  'click .upvotable': function(e) {\\n    e.preventDefault();\\n    Meteor.call('upvote', this._id);\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_page.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_page.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/views/posts/post_page.js\",\"sourcesContent\":[\"Template.postPage.helpers({\\n  comments: function() {\\n    return Comments.find({postId: this._id});\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/post_submit.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/post_submit.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/post_submit.js\",\"sourcesContent\":[\"//var Uploads = new FS.Collection(\\\"uploads\\\", {\\n//  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"~/uploads\\\"})]\\n//});\\n\\nvar addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 1) {\\n        var url = cols[0];\\n        cols.shift();\\n        var label = cols.join(' ');\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.postSubmit.events({\\n  'submit form': function(e) {\\n    e.preventDefault();\\n\\n    var post = {\\n      url: $(e.target).find('[name=url]').val(),\\n      title: $(e.target).find('[name=title]').val(),\\n      message: $(e.target).find('[name=message]').val()\\n    }\\n\\n    Meteor.call('post', post, function(error, id) {\\n      if (error) {\\n        // display the error to the user\\n        throwError(error.reason);\\n\\n        if (error.error === 302)\\n          Router.go('postPage', {_id: error.details})\\n      } else {\\n        Router.go('postPage', {_id: id});\\n      }\\n    });\\n  },\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/posts_list.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/posts_list.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/client/views/posts/posts_list.js\",\"sourcesContent\":[\"Template.postsList.helpers({\\n  postsWithRank: function() {\\n    this.posts.rewind();\\n    return this.posts.map(function(post, index, cursor) {\\n      post._rank = index;\\n      return post;\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/client/views/posts/uploadnxb.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/views/posts/uploadnxb.js\"],\"names\":[],\"mappings\":\"yfile\":\"/client/views/posts/uploadnxb.js\",\"sourcesContent\":[\"var addComment = function(comment) {\\n  // postId, label, url, [body]\\n  Meteor.subscribe('comments');\\n\\n  var found = Comments.find({postId:comment.postId, url:comment.url}).fetch();\\n  if (found.length == 0) {\\n    console.log( 'adding comment:' + JSON.stringify(comment));\\n    Meteor.call('comment', comment, function(error, commentId) {\\n      if (error){\\n        throwError(error.reason);\\n      }\\n    });\\n  }\\n};\\n\\nvar stripExtension = function(name, exts) {\\n  for( var i = 0; i < exts.length; i++ ) {\\n    var idx = name.indexOf('.' + exts[i]);\\n    while ( idx != -1 && idx != 0 ) {\\n        name = name.substring(0, idx);\\n        idx = name.indexOf(exts[i]);\\n    }\\n  }\\n  return name;\\n};\\nvar handleNxbFile = function(file) {\\n  /* read, extract each line, add as link */\\n\\n  Meteor.subscribe('posts');\\n\\n  console.log( 'file: type:' +  JSON.stringify(file));\\n  var name = file.name;\\n  var type = file.type;\\n\\n  name = stripExtension( name, ['nxb', 'txt']);\\n  console.log( 'file: name:' + name);\\n\\n  var addLinksFromLines = function(nxbId, lines) {\\n    lines.forEach(function(line) {\\n      var cols = line.split(' ');\\n      if ( cols.length > 0) {\\n        var url = cols[0];\\n        var label = '';\\n\\n        if ( cols.length > 1) {\\n          cols.shift();\\n          label = cols.join(' ');\\n        }\\n\\n        addComment({postId: nxbId, url:url, label:label});\\n      }\\n    });\\n  };\\n\\n  var reader = new FileReader();\\n  reader.onload = function(e) {\\n    var text = reader.result;\\n    var lines = text.match(/[^\\\\r\\\\n]+/g);\\n\\n    if ( lines.length > 0 ) {\\n      console.log('lines:' + lines.length);\\n\\n      var nxb = Posts.findOne({title:name});\\n      var nxbId = nxb && nxb._id;\\n\\n      if ( nxbId ) {\\n        // to existing nxb\\n          console.log( 'adding to existing nxb:' + nxbId);\\n          addLinksFromLines(nxbId, lines);\\n          Router.go('postPage', {_id: nxbId});\\n\\n      } else {\\n        // create one\\n        nxb = {\\n          title:name\\n        };\\n        Meteor.call('post', nxb, function(error, id) {\\n          if (error) {\\n            // display the error to the user\\n            throwError(error.reason);\\n\\n          } else {\\n            console.log( 'adding to new nxb:' + id);\\n            addLinksFromLines(id, lines);\\n            Router.go('postPage', {_id: id});\\n          }\\n        });\\n      }\\n    }\\n\\n  }\\n  reader.readAsText(file);\\n};\\n\\nTemplate.uploadnxb.events({\\n\\n  'change .uploadnxb': function(event, template) {\\n    console.log('files changed for upload');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  },\\n  // Catch the dropped event\\n  'dropped #dropzone': function(event, temp) {\\n    console.log('files dropped');\\n    FS.Utility.eachFile(event, function(file) {\\n      handleNxbFile(file);\\n\\n      /*\\n      Uploads.insert(file, function (err, fileObj) {\\n        if ( !err ) {\\n            console.log( 'uploaded file:' + fileObj._id);\\n        } else {\\n            throwError(err);\\n        }\\n      });\\n      */\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/config.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/config.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA,G\",\"file\":\"/client/helpers/config.js\",\"sourcesContent\":[\"Accounts.ui.config({\\n  passwordSignupFields: 'USERNAME_ONLY'\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/errors.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/errors.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C\",\"file\":\"/client/helpers/errors.js\",\"sourcesContent\":[\"// Local (client-only) collection\\nErrors = new Meteor.Collection(null);\\n\\nthrowError = function(message) {\\n  Errors.insert({message: message, seen: false})\\n}\\n\\nclearErrors = function() {\\n  Errors.remove({seen: true});\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\\n}).call(this);\\n\",\"servePath\":\"/client/helpers/handlebars.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/client/helpers/handlebars.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/client/helpers/handlebars.js\",\"sourcesContent\":[\"Handlebars.registerHelper('pluralize', function(n, thing) {\\n  // fairly stupid pluralizer\\n  if (n === 1) {\\n    return '1 ' + thing;\\n  } else {\\n    return n + ' ' + thing + 's';\\n  }\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){}).call(this);\\n\",\"servePath\":\"/client/main.js\",\"sourceMap\":{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"/client/main.js\"}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/.meteor/local/bundler-cache/linker/f9a136144fb792826259ab85cf015bef579cb5c8.cache:\n    1: [{\"type\":\"js\",\"data\":\"/* Imports for global scope */\\n\\nRESTstop = Package['hellogerard:reststop2'].RESTstop;\\nRouter = Package['iron:router'].Router;\\nRouteController = Package['iron:router'].RouteController;\\nAccounts = Package['accounts-base'].Accounts;\\nAccountsServer = Package['accounts-base'].AccountsServer;\\nHTTP = Package['raix:http-methods'].HTTP;\\nFS = Package['cfs:base-package'].FS;\\nIron = Package['iron:core'].Iron;\\nMeteor = Package.meteor.Meteor;\\nWebApp = Package.webapp.WebApp;\\nmain = Package.webapp.main;\\nWebAppInternals = Package.webapp.WebAppInternals;\\nLog = Package.logging.Log;\\nTracker = Package.deps.Tracker;\\nDeps = Package.deps.Deps;\\nDDP = Package['ddp-client'].DDP;\\nDDPServer = Package['ddp-server'].DDPServer;\\nMongoInternals = Package.mongo.MongoInternals;\\nMongo = Package.mongo.Mongo;\\nBlaze = Package.ui.Blaze;\\nUI = Package.ui.UI;\\nHandlebars = Package.ui.Handlebars;\\nSpacebars = Package.spacebars.Spacebars;\\ncheck = Package.check.check;\\nMatch = Package.check.Match;\\n_ = Package.underscore._;\\nRandom = Package.random.Random;\\nEJSON = Package.ejson.EJSON;\\nHTML = Package.htmljs.HTML;\\n\\n\",\"servePath\":\"/packages/global-imports.js\"},{\"type\":\"js\",\"data\":\"(function(){// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\\n}).call(this);\\n\",\"servePath\":\"/lib/permissions.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/permissions.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA,C\",\"file\":\"/lib/permissions.js\",\"sourcesContent\":[\"// check that the userId specified owns the documents\\nownsDocument = function(userId, doc) {\\n  return doc && doc.userId === userId;\\n}\"]}},{\"type\":\"js\",\"data\":\"(function(){Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\\n}).call(this);\\n\",\"servePath\":\"/lib/router.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/lib/router.js\"],\"names\":[],\"mappings\":\"yfile\":\"/lib/router.js\",\"sourcesContent\":[\"Router.configure({\\n  layoutTemplate: 'layout',\\n  loadingTemplate: 'loading',\\n  waitOn: function() { \\n    return [Meteor.subscribe('notifications')]\\n  }\\n});\\n\\nPostsListController = RouteController.extend({\\n  template: 'postsList',\\n  increment: 5, \\n  limit: function() { \\n    return parseInt(this.params.postsLimit) || this.increment; \\n  },\\n  findOptions: function() {\\n    return {sort: this.sort, limit: this.limit()};\\n  },\\n  waitOn: function() {\\n    return Meteor.subscribe('posts', this.findOptions());\\n  },\\n  posts: function() {\\n    return Posts.find({}, this.findOptions());\\n  },\\n  data: function() {\\n    var hasMore = this.posts().count() === this.limit();\\n    return {\\n      posts: this.posts(),\\n      nextPath: hasMore ? this.nextPath() : null\\n    };\\n  }\\n});\\n\\nNewPostsListController = PostsListController.extend({\\n  sort: {submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.newPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nBestPostsListController = PostsListController.extend({\\n  sort: {votes: -1, submitted: -1, _id: -1},\\n  nextPath: function() {\\n    return Router.routes.bestPosts.path({postsLimit: this.limit() + this.increment})\\n  }\\n});\\n\\nRouter.map(function() {\\n  this.route('home', {\\n    path: '/',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('newPosts', {\\n    path: '/new/:postsLimit?',\\n    controller: NewPostsListController\\n  });\\n  \\n  this.route('bestPosts', {\\n    path: '/best/:postsLimit?',\\n    controller: BestPostsListController\\n  });\\n  \\n  this.route('postPage', {\\n    path: '/posts/:_id',\\n    waitOn: function() {\\n      return [\\n        Meteor.subscribe('singlePost', this.params._id),\\n        Meteor.subscribe('comments', this.params._id)\\n      ];\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n\\n  this.route('postEdit', {\\n    path: '/posts/:_id/edit',\\n    waitOn: function() { \\n      return Meteor.subscribe('singlePost', this.params._id);\\n    },\\n    data: function() { return Posts.findOne(this.params._id); }\\n  });\\n  \\n  this.route('postSubmit', {\\n    path: '/submit',\\n    progress: {enabled: false}\\n  });\\n});\\n\\n\\nvar requireLogin = function(pause) {\\n  if (! Meteor.user()) {\\n    if (Meteor.loggingIn())\\n      this.render(this.loadingTemplate);\\n    else\\n      this.render('accessDenied');\\n    \\n    pause();\\n  }\\n}\\n\\nRouter.onBeforeAction('loading');\\nRouter.onBeforeAction(requireLogin, {only: 'postSubmit'});\\nRouter.onBeforeAction(function() { clearErrors() });\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/comments.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/comments.js\"],\"names\":[],\"mappings\":\"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/comments.js\",\"sourcesContent\":[\"\\nComments = new Meteor.Collection('comments');\\n\\nComments.allow({\\n  update: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    return Meteor.user() && Meteor.userId() == userId;\\n  }\\n});\\n\\nComments.deny({\\n  update: function(userId, comment, fieldNames) {\\n    // may only edit the following 3 fields:\\n    return (_.without(fieldNames, 'label', 'url', 'body').length > 0);\\n  },\\n  remove: function(userId, comment, fieldNames) {\\n    console.log( 'Comments.deny.remove: userId:' + userId);\\n    Posts.update(comment.postId, {$inc: {commentsCount: -1}});\\n    return false;\\n  }\\n});\\n\\nMeteor.methods({\\n  comment: function(commentAttributes) {\\n    var user = Meteor.user();\\n    var post = Posts.findOne(commentAttributes.postId);\\n    var link = Comments.find({postId:commentAttributes.postId, url:commentAttributes.url}).fetch();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to make comments\\\");\\n\\n    if (!commentAttributes.label)\\n      throw new Meteor.Error(422, 'Please enter label');\\n    if (!commentAttributes.url)\\n      throw new Meteor.Error(422, 'Please enter URL');\\n\\n    if (!post)\\n      throw new Meteor.Error(422, 'You must comment on a post');\\n\\n    if (link.length > 0)\\n      throw new Meteor.Error(422, 'Duplicate url');\\n\\n    comment = _.extend(_.pick(commentAttributes, 'postId', 'body', 'label', 'url'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime()\\n    });\\n\\n    // update the post with the number of comments\\n    Posts.update(comment.postId, {$inc: {commentsCount: 1}});\\n\\n    // create the comment, save the id\\n    comment._id = Comments.insert(comment);\\n\\n    // now create a notification, informing the user that there's been a comment\\n    createCommentNotification(comment);\\n\\n    return comment._id;\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\\n}).call(this);\\n\",\"servePath\":\"/collections/notifications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/notifications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E\",\"file\":\"/collections/notifications.js\",\"sourcesContent\":[\"Notifications = new Meteor.Collection('notifications');\\n\\nNotifications.allow({\\n  update: ownsDocument\\n});\\n\\ncreateCommentNotification = function(comment) {\\n  var post = Posts.findOne(comment.postId);\\n  if (comment.userId !== post.userId) {\\n    Notifications.insert({\\n      userId: post.userId,\\n      postId: post._id,\\n      commentId: comment._id,\\n      commenterName: comment.author,\\n      read: false\\n    });\\n  }\\n};\"]}},{\"type\":\"js\",\"data\":\"(function(){Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/posts.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/posts.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/collections/posts.js\",\"sourcesContent\":[\"Posts = new Meteor.Collection('posts');\\n\\nPosts.allow({\\n  update: ownsDocument,\\n  remove: ownsDocument\\n});\\n\\nPosts.deny({\\n  update: function(userId, post, fieldNames) {\\n    // may only edit the following two fields:\\n    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);\\n  }\\n});\\n\\nMeteor.methods({\\n  post: function(postAttributes) {\\n    var user = Meteor.user();\\n\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to post new stories\\\");\\n\\n    // ensure the post has a title\\n    if (!postAttributes.title)\\n      throw new Meteor.Error(422, 'Please fill in a headline');\\n\\n\\n    // pick out the whitelisted keys\\n    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {\\n      userId: user._id,\\n      author: user.username,\\n      submitted: new Date().getTime(),\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n\\n    var postId = Posts.insert(post);\\n\\n    return postId;\\n  },\\n\\n  upvote: function(postId) {\\n    var user = Meteor.user();\\n    // ensure the user is logged in\\n    if (!user)\\n      throw new Meteor.Error(401, \\\"You need to login to upvote\\\");\\n\\n    Posts.update({\\n      _id: postId,\\n      upvoters: {$ne: user._id}\\n    }, {\\n      $addToSet: {upvoters: user._id},\\n      $inc: {votes: 1}\\n    });\\n  }\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\\n}).call(this);\\n\",\"servePath\":\"/collections/uploads.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"meteor://ðŸ’»app/collections/uploads.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA\",\"file\":\"/collections/uploads.js\",\"sourcesContent\":[\"Uploads = new FS.Collection(\\\"uploads\\\", {\\n  stores: [new FS.Store.FileSystem(\\\"uploads\\\", {path: \\\"./uploads\\\"})]\\n});\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/fixtures.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/fixtures.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/fixtures.js\",\"sourcesContent\":[\"// Fixture data\\nif (Posts.find().count() === 0) {\\n  /*\\n  var now = new Date().getTime();\\n\\n  // create two users\\n  var tomId = Meteor.users.insert({\\n    profile: { name: 'Tom Coleman' }\\n  });\\n  var tom = Meteor.users.findOne(tomId);\\n  var sachaId = Meteor.users.insert({\\n    profile: { name: 'Sacha Greif' }\\n  });\\n  var sacha = Meteor.users.findOne(sachaId);\\n\\n  var telescopeId = Posts.insert({\\n    title: 'Introducing Telescope',\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    url: 'http://sachagreif.com/introducing-telescope/',\\n    submitted: now - 7 * 3600 * 1000,\\n    commentsCount: 2,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    submitted: now - 5 * 3600 * 1000,\\n    body: 'Interesting project Sacha, can I get involved?'\\n  });\\n\\n  Comments.insert({\\n    postId: telescopeId,\\n    userId: sacha._id,\\n    author: sacha.profile.name,\\n    submitted: now - 3 * 3600 * 1000,\\n    body: 'You sure can Tom!'\\n  });\\n\\n  Posts.insert({\\n    title: 'Meteor',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://meteor.com',\\n    submitted: now - 10 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  Posts.insert({\\n    title: 'The Meteor Book',\\n    userId: tom._id,\\n    author: tom.profile.name,\\n    url: 'http://themeteorbook.com',\\n    submitted: now - 12 * 3600 * 1000,\\n    commentsCount: 0,\\n    upvoters: [], votes: 0\\n  });\\n\\n  for (var i = 0; i < 10; i++) {\\n    Posts.insert({\\n      title: 'Test post #' + i,\\n      author: sacha.profile.name,\\n      userId: sacha._id,\\n      url: 'http://google.com/?q=test-' + i,\\n      submitted: now - i * 3600 * 1000 + 1,\\n      commentsCount: 0,\\n      upvoters: [], votes: 0\\n    });\\n  }\\n  */\\n}\\n\"]}},{\"type\":\"js\",\"data\":\"(function(){Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\\n}).call(this);\\n\",\"servePath\":\"/server/publications.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/publications.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G\",\"file\":\"/server/publications.js\",\"sourcesContent\":[\"Meteor.publish('posts', function(options) {\\n  return Posts.find({}, options);\\n});\\n\\nMeteor.publish('singlePost', function(id) {\\n  return id && Posts.find(id);\\n});\\n\\n\\nMeteor.publish('comments', function(postId) {\\n  return Comments.find({postId: postId});\\n});\\n\\nMeteor.publish('notifications', function() {\\n  return Notifications.find({userId: this.userId});\\n});\"]}},{\"type\":\"js\",\"data\":\"(function(){if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\\n}).call(this);\\n\",\"servePath\":\"/server/rest.js\",\"sourceMap\":{\"version\":3,\"sources\":[\"/server/rest.js\"],\"names\":[],\"mappings\":\"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA\",\"file\":\"/server/rest.js\",\"sourcesContent\":[\"if (Meteor.isServer) {\\n    RESTstop.configure({\\n      use_auth: false,\\n      pretty_json: true\\n    });\\n\\n    RESTstop.add('links/:postId', { require_login: false }, function() {\\n      var links = [];\\n\\n      Comments.find({postId: this.params.postId}).forEach(function(linkentry) {\\n\\n        // Modify the post here...\\n        console.log( 'links:' + JSON.stringify(_.pick(linkentry, 'label', 'url')));\\n        links.push(_.pick(linkentry, 'label', 'url'));\\n      });\\n\\n      console.log( 'links: returning links:' + links);\\n      return [links];\\n    });\\n\\n  RESTstop.add('nxb', { require_login: false }, function() {\\n    var nxb = [];\\n\\n    console.log( 'nxb: request:' + this.request.HOST);\\n    Posts.find().forEach(function(nxbentry) {\\n\\n      var entry = _.pick(nxbentry, 'title', '_id');\\n      _.extend(entry, {links: '/api/links/' + entry._id} );\\n      // Modify the post here...\\n      console.log( 'nxb:' + JSON.stringify(entry));\\n      nxb.push(entry);\\n    });\\n\\n    console.log( 'nxb: returning nxb:' + nxb);\\n    return [nxb];\\n  });\\n}\\n\"]}}]\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/helpers/errors.js:\n    6  }\n    7  \n    8: clearErrors = function() {\n    9    Errors.remove({seen: true});\n   10  }\n\n/Users/simon/Documents/Projects/Node/meteor/nxbcloud/lib/router.js:\n  113  Router.onBeforeAction(requireLogin, {only: 'postSubmit'});\n  114  */\n  115: Router.onBeforeAction(function() { clearErrors() });\n  116  \n\n48 matches across 21 files\n",
			"settings":
			{
				"buffer_size": 828035,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 247.0,
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				":W",
				":w - Save"
			],
			[
				":$",
				":$ - EOF"
			],
			[
				":0",
				":0 - BOF"
			],
			[
				":",
				":w - Save"
			],
			[
				"Package Control: install package",
				"Package Control: Install Package"
			],
			[
				"",
				":w - Save"
			],
			[
				":4",
				"Set Syntax: camlp4"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/simon/Documents/Projects/polymer/psk-full/app/index.html",
		"/Users/simon/Documents/Projects/d3/logtochart/index.html",
		"/Users/simon/Documents/Projects/videotoolbox/VideoTimeLine/VideoTimeLine/AppDelegate.cs",
		"/Users/simon/Documents/Projects/videotoolbox/VideoTimeLine/VideoTimeLine/EAGLLayer.cs",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/README.md",
		"/Users/simon/Documents/Projects/Node/meteor/landing-page/index.html",
		"/Users/simon/Documents/Projects/android/layout/app/src/main/res/layout/activity_my.xml",
		"/Users/simon/Documents/Projects/Node/meteor/i-am-here-weirdmeetup/model.js",
		"/Users/simon/Documents/Projects/Node/meteor/i-am-here-weirdmeetup/server/server.js",
		"/Users/simon/Documents/Projects/Node/meteor/i-am-here-weirdmeetup/client/client.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/orders-proto.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/main.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/comments/comment.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/comments/comment_submit.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/posts/post_edit.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/posts/post_page.js",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/posts/post_submit.js",
		"/Users/simon/Documents/Projects/Node/meteor/googlemaps-autocomplete/example.css",
		"/Users/simon/Documents/Projects/Node/meteor/googlemaps-autocomplete/example.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-status.txt",
		"/Users/simon/Documents/Projects/Node/meteor/googlemaps-autocomplete/example.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/layout.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/orders.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/client.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/tables.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/main.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/clientglobal.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/places.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/tables.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/client/places.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/orders-proto.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/lib/router.js",
		"/Users/simon/Documents/Projects/Node/meteor/i-am-here-weirdmeetup/client/parties.html",
		"/Users/simon/Documents/Projects/Node/meteor/leaderboard/leaderboard.js",
		"/Users/simon/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/simon/Documents/Projects/Node/meteor/parties/model.js",
		"/Users/simon/Documents/Projects/Node/meteor/parties/client/parties.html",
		"/Users/simon/Documents/Projects/Node/meteor/parties/client/client.js",
		"/Users/simon/Documents/Projects/Node/meteor/leaderboard/leaderboard.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders-proto/orders-proto.css",
		"/Users/simon/Documents/Projects/Node/meteor/leaderboard/leaderboard.css",
		"/Users/simon/Documents/Projects/Node/meteor/orders/lib/router.js",
		"/Users/simon/Documents/Projects/Node/meteor/todos/client/todos.css",
		"/Users/simon/Documents/Projects/Node/meteor/todos/client/todos.html",
		"/Users/simon/Documents/Projects/Node/meteor/todos/client/todos.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/shop_list.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/NOTES.md",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/client.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/menu_page.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/new_order.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/orders.css",
		"/Users/simon/Documents/Projects/Node/meteor/orders/server/fixtures.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/shop_page.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/collections/collections.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/new_order.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/menu_page.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/shop_list.js",
		"/Users/simon/Documents/Projects/KESL/Course/2014-01-WebSearch/Subjects for Final.txt",
		"/Users/simon/Documents/Projects/Node/meteor/nxbcloud/client/views/posts/uploadnxb.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/orders.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/shop_item.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/loading.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/layout.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/client/main.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/server/server.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/orders.html",
		"/Users/simon/Documents/Projects/Node/meteor/orders/orders.js",
		"/Users/simon/Documents/Projects/Node/meteor/orders/collections/orders.js",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/urlutil.js",
		"/Users/simon/Documents/Projects/Node/meteor/i-am-here-weirdmeetup/lib/router.js",
		"/Users/simon/Documents/Projects/angularjs/hello.html",
		"/Users/simon/Documents/Projects/angularjs/sample0/namespace.html",
		"/Users/simon/Documents/Projects/Freader/scrapper.js",
		"/Users/simon/Documents/Projects/Freader/tests/testScrapper.js",
		"/Users/simon/Documents/Projects/Freader/user.js",
		"/Users/simon/Documents/Projects/Freader/database/userDB.js",
		"/Users/simon/Documents/Projects/Freader/tests/testDatabase.js",
		"/Users/simon/Documents/Projects/Freader/app.js",
		"/Users/simon/Documents/Projects/Freader/database/feedDB.js",
		"/Users/simon/Documents/Projects/Freader/database/database.js",
		"/Users/simon/Documents/Projects/Freader/feeds.js",
		"/Users/simon/Documents/Projects/Freader/webapp/webapp.js",
		"/Users/simon/Documents/Projects/Freader/index.html",
		"/Users/simon/Documents/Projects/Freader/freader.sublime-project",
		"/Users/simon/Documents/Projects/KESL/Course/2013-02-DIP/Reports/Assignment3/References/opencv/doc/opencv.bib",
		"/Users/simon/Documents/Nex/NexPlayerSDK_SWHW_Android_ver6.5.1.117_20131101_NWMVA_TRIAL_by01DEC2013/nexplayersample_nr/NexPlayerSample.java",
		"/Users/simon/Documents/Nex/Note on Using NexPlayer",
		"/Users/simon/Documents/Projects/PaperZoo/Animations/export/lion1to5_1.6.13/Lion.json",
		"/Users/simon/Documents/Projects/PaperZoo/Animations/export/bgtest/Background.json",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/gallery-switch.html",
		"/Users/simon/Documents/Projects/PaperZoo/spine-runtime/spine-runtimes/spine-cocos2d-iphone/Resources/goblins.json",
		"/Users/simon/Downloads/envelope_distort/EnvelopeDistordTest.as",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/textscene/templates/body.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/textscene/index.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/templates/body.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/templates/body.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/gallery-fullscreen.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/demo-gallery.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/index.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/js/app_onload.js",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/js/libs/blueimp-gallery.js",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/templates/header.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/styles/main-default.css",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/styles/slideshow.css",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/js/libs/sshow.js",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/styles/sshow.css",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/index.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/index.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/js/libs/slideshow.js",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/benchmarks/galleria/preview.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/images/arrows.png",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/templates/body.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/templates/about.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/js/app_onload.js",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/templates/about.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/templates/header.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/templates/header.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/appskel/conf/tagline.txt",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/templates/footer.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/templates/about.html",
		"/Users/simon/Documents/Projects/StartupEngineering/webapp-protos/public/slideshow/app.html",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/public/js/fbsdk.js",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/conf/init.sql",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/rest.js",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/web.js",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/conf/preload.sql",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/appconfig.js",
		"/Users/simon/Documents/Projects/StartupEngineering/startbucks/public/js/app.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"clearErrors",
			"requireLogin",
			"PostsListController",
			"name=\"yield",
			"yield",
			"span",
			"_.pick",
			"_.extend",
			"pluck",
			"_.",
			"addComment",
			"parties",
			"insert",
			"_.",
			"bounds",
			"input",
			"clicked menu",
			"userDisplayName",
			"useDisplayName",
			"userDisplayerName",
			"userDisplayName",
			"displayName",
			"userDisplayName",
			"tableOwnerName",
			"guestId",
			"addMenuRow",
			"ordersAll",
			"activeTableId",
			"activeTableOwnerName",
			"userDisplayName",
			"Guests",
			"now",
			"Session.set",
			"Session",
			"activeTableId",
			"guestId",
			"testGlobalFunction",
			"vintage",
			"Vintage",
			"console.log",
			"/console.log",
			"inline",
			"glass",
			"console.log",
			"button",
			"#if",
			"button",
			"expires",
			"expir",
			"insert",
			"Date",
			"button",
			"userDisplayName",
			"orderItem",
			"displayName",
			"row",
			"button",
			"greeting",
			"Meteor.user",
			"user",
			"userProfile",
			"#if",
			"displayName",
			"orderItem",
			"Player",
			"itemName",
			"createDialog",
			"keydown",
			"vi",
			"hello",
			"orderItemList",
			"modalNew",
			"with",
			"shopId",
			"modalNewMenuItem",
			"tmp",
			"activateInput",
			"addtag",
			"update",
			"orderItemRow",
			"edittag-input",
			"editing_addtag",
			"edit_tag",
			"label",
			"float:",
			"done_class",
			"todo_item",
			"todo_items",
			"todo_item",
			"#li",
			"todo",
			"orderViewMine",
			"okCancelEvents",
			"new-order-item",
			"okcancelevents",
			"okCancelEvents",
			"edittag-input",
			"okCancelEvents",
			"edittag-input",
			"addtag",
			"createList",
			"\n",
			"{{shop",
			"Parties.find",
			"subscribe",
			"_.ex",
			"rsvp",
			"rsvps",
			"h1",
			"shopsData",
			"postsData",
			"fetchurl",
			"clearTimeout",
			"subscribe",
			"rsvpName",
			"set(\"selected",
			"selectParty",
			"set(\"selected",
			"marker.partyId",
			"marker.title",
			"set(\"selected",
			"\"selected",
			"map.rendered",
			"<<<",
			"googleMapMarkers",
			"map.destroyed",
			"mapUpdateParties",
			"myCount"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"http://www.iosappdev.co.kr"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/simon/Documents/Projects/Node/meteor/nxbcloud/lib/router.js",
					"settings":
					{
						"buffer_size": 2590,
						"regions":
						{
						},
						"selection":
						[
							[
								2211,
								2211
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1328.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 828035,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										297,
										308
									],
									[
										3784,
										3795
									],
									[
										3956,
										3967
									],
									[
										4528,
										4539
									],
									[
										4856,
										4867
									],
									[
										8348,
										8359
									],
									[
										56285,
										56296
									],
									[
										59537,
										59548
									],
									[
										93018,
										93029
									],
									[
										93513,
										93524
									],
									[
										108482,
										108493
									],
									[
										111844,
										111855
									],
									[
										177079,
										177090
									],
									[
										180407,
										180418
									],
									[
										213735,
										213746
									],
									[
										214217,
										214228
									],
									[
										272326,
										272337
									],
									[
										275578,
										275589
									],
									[
										308906,
										308917
									],
									[
										309388,
										309399
									],
									[
										324276,
										324287
									],
									[
										327617,
										327628
									],
									[
										349539,
										349550
									],
									[
										352893,
										352904
									],
									[
										418300,
										418311
									],
									[
										421649,
										421660
									],
									[
										455143,
										455154
									],
									[
										455638,
										455649
									],
									[
										470530,
										470541
									],
									[
										473795,
										473806
									],
									[
										539034,
										539045
									],
									[
										542420,
										542431
									],
									[
										575758,
										575769
									],
									[
										576240,
										576251
									],
									[
										634418,
										634429
									],
									[
										637759,
										637770
									],
									[
										671097,
										671108
									],
									[
										671579,
										671590
									],
									[
										686510,
										686521
									],
									[
										689909,
										689920
									],
									[
										755045,
										755056
									],
									[
										758297,
										758308
									],
									[
										791625,
										791636
									],
									[
										792107,
										792118
									],
									[
										806935,
										806946
									],
									[
										810200,
										810211
									],
									[
										827720,
										827731
									],
									[
										827981,
										827992
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								150,
								153
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 222.0,
	"status_bar_visible": true
}
